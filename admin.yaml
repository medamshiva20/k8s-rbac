apiVersion: v1
kind: Namespace
metadata:
 name: roboshop
---
#Here’s an example Role in the “default” namespace that can be used to grant read access to pods:
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: roboshop
  name: roboshop-admin
rules:
- apiGroups: ["*"] # "" indicates the core API group
  resources: ["*"] 
  verbs: ["*"] #actions on resources, create, read, update, delete
---
# A typical ClusterRole consists of:
# A ClusterRole name
# A set of rules that specify what actions are allowed or denied on a particular Kubernetes resource across the entire cluster
# A binding that associates the ClusterRole with a user or service account across the entire cluster

# apiVersion: rbac.authorization.k8s.io/v1
# kind: ClusterRole
# metadata:
#   # "namespace" omitted since ClusterRoles are not namespaced
#   name: secret-reader
# rules:
# - apiGroups: ["v1","apps/v1",""]
#   resources: ["secrets","nodes","namespaces","persistentvolumes"]
#   verbs: ["get", "watch", "list"]
---
apiVersion: rbac.authorization.k8s.io/v1
# This role binding allows "jane" to read pods in the "default" namespace.
# You need to already have a Role named "pod-reader" in that namespace.
kind: RoleBinding
metadata:
  name: roboshop-admin
  namespace: roboshop
subjects:
# You can specify more than one "subject"
- kind: User
  name: siva # "name" is case sensitive
  apiGroup: rbac.authorization.k8s.io
roleRef:
  # "roleRef" specifies the binding to a Role / ClusterRole
  kind: Role #this must be Role or ClusterRole
  name: roboshop-admin # this must match the name of the Role or ClusterRole you wish to bind to
  apiGroup: rbac.authorization.k8s.io